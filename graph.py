#module for graphing data and file output.
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.colors import ListedColormap
# example data:

#exData = [['Time', 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.31, 1.41, 1.51, 1.61, 1.71, 1.81, 1.91, 2.01, 2.11, 2.21, 2.31, 2.41, 2.51, 2.61, 2.71, 2.81, 2.91, 3.01, 3.11, 3.21, 3.31, 3.41, 3.51, 3.61, 3.71, 3.81, 3.91, 4.02, 4.12, 4.22, 4.32, 4.42, 4.52, 4.62, 4.72, 4.82, 4.92, 5.02, 5.12, 5.22, 5.32, 5.42, 5.52, 5.62, 5.72, 5.82, 5.92, 6.02, 6.12, 6.22, 6.32, 6.42, 6.52, 6.63, 6.73, 6.83, 6.93, 7.03, 7.13, 7.23, 7.33, 7.43, 7.53, 7.63, 7.73, 7.83, 7.93, 8.03, 8.13, 8.23, 8.33, 8.43, 8.53, 8.63, 8.73, 8.83, 8.93, 9.03, 9.13, 9.23, 9.33, 9.43, 9.53, 9.64, 9.74, 9.84, 9.94], ['Requested Speed', 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0, 50.0, 52.0, 54.0, 56.0, 58.0, 60.0, 62.0, 64.0, 66.0, 68.0, 70.0, 72.0, 74.0, 76.0, 78.0, 80.0, 82.0, 84.0, 86.0, 88.0, 90.0, 92.0, 94.0, 96.0, 98.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0], ['Actual Speed', 0.84, 1.68, 2.52, 3.36, 4.2, 5.04, 5.88, 6.72, 7.56, 8.4, 9.24, 10.08, 10.92, 11.76, 12.6, 13.44, 14.28, 15.12, 15.959999999999999, 16.8, 17.64, 18.48, 19.32, 20.16, 21.0, 21.84, 22.68, 23.52, 24.36, 25.2, 26.04, 26.88, 27.72, 28.56, 29.4, 30.24, 31.08, 31.919999999999998, 32.76, 33.6, 34.44, 35.28, 36.12, 36.96, 37.8, 38.64, 39.48, 40.32, 41.16, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0], ['Force', 384, 567, 247, 156, 466, 490, 580, 481, 949, 204, 545, 433, 592, 304, 603, 470, 544, 363, 285, 859, 318, 818, 911, 826, 930, 831, 876, 515, 384, 826, 426, 222, 990, 241, 883, 23, 84, 480, 88, 853, 244, 569, 737, 4, 112, 847, 374, 352, 110, 928, 40, 811, 690, 588, 599, 797, 105, 741, 606, 896, 813, 618, 277, 161, 564, 642, 733, 90, 520, 64, 158, 392, 934, 522, 673, 306, 511, 776, 485, 6, 51, 356, 978, 992, 597, 325, 832, 950, 616, 711, 892, 762, 13, 947, 372, 450, 566, 3, 370, 490], ['Drag(N)', 8885.19, 3279.88, 635.02, 225.6, 431.3, 314.94, 273.88, 173.9, 271.09, 47.2, 104.22, 69.58, 81.05, 35.89, 62.01, 42.48, 43.55, 25.92, 18.27, 49.69, 16.68, 39.11, 39.85, 33.18, 34.43, 28.44, 27.8, 15.2, 10.57, 21.24, 10.26, 5.02, 21.04, 4.82, 16.68, 0.41, 1.42, 7.69, 1.34, 12.34, 3.36, 7.46, 9.22, 0.05, 1.28, 9.26, 3.92, 3.54, 1.06, 8.59, 0.37, 7.51, 6.39, 5.44, 5.54, 7.38, 0.97, 6.86, 5.61, 8.29, 7.52, 5.72, 2.56, 1.49, 5.22, 5.94, 6.78, 0.83, 4.81, 0.59, 1.46, 3.63, 8.64, 4.83, 6.23, 2.83, 4.73, 7.18, 4.49, 0.06, 0.47, 3.29, 9.05, 9.18, 5.53, 3.01, 7.7, 8.79, 5.7, 6.58, 8.26, 7.05, 0.12, 8.76, 3.44, 4.16, 5.24, 0.03, 3.42, 4.54]]
#exData = [['Time', 0.0, 0.1, 0.2, 0.3, 0.41, 0.51, 0.61, 0.71, 0.81, 0.91, 1.01, 1.11, 1.22, 1.32, 1.42, 1.52, 1.62, 1.72, 1.82, 1.93, 2.03, 2.13, 2.23, 2.33, 2.43, 2.53, 2.64, 2.74, 2.84, 2.94, 3.04, 3.14, 3.24, 3.35, 3.45, 3.55, 3.65, 3.75, 3.85, 3.95, 4.06, 4.16, 4.26, 4.36, 4.46, 4.56, 4.66, 4.77, 4.87, 4.97, 5.07, 5.17, 5.27, 5.37, 5.47, 5.58, 5.68, 5.78, 5.88, 5.98, 6.08, 6.18, 6.28, 6.38, 6.48, 6.59, 6.69, 6.79, 6.89, 6.99, 7.09, 7.19, 7.29, 7.39, 7.5, 7.6, 7.7, 7.8, 7.9, 8.0, 8.1, 8.2, 8.3, 8.41, 8.51, 8.61, 8.71, 8.81, 8.91, 9.01, 9.11, 9.21, 9.32, 9.42, 9.52, 9.62, 9.72, 9.82, 9.92, 10.02], ['Requested Speed', 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0, 50.0, 52.0, 54.0, 56.0, 58.0, 60.0, 62.0, 64.0, 66.0, 68.0, 70.0, 72.0, 74.0, 76.0, 78.0, 80.0, 82.0, 84.0, 86.0, 88.0, 90.0, 92.0, 94.0, 96.0, 98.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0], ['Actual Speed', 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214, 20.203050891044214], ['Force', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.142, 19.278, 5.712, 0, 0, 0, 0, 0, 0.714, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.142, 2.856, 0, 0, 0, 5.712, 10.709999999999999, 12.852, 13.565999999999999, 21.419999999999998, 32.129999999999995, 48.552, 64.974, 91.392, 111.384, 127.092, 122.094, 79.96799999999999, 65.688, 71.39999999999999, 137.088, 223.482, 312.018, 372.70799999999997, 349.14599999999996, 351.288, 292.74, 202.06199999999998, 206.346, 262.038, 355.572, 405.55199999999996, 428.4, 336.294, 219.19799999999998, 169.218, 208.488, 257.03999999999996, 302.022, 360.57, 402.69599999999997, 282.03, 197.778, 184.212, 237.762, 366.282, 469.81199999999995, 512.6519999999999, 537.6419999999999, 536.928, 469.81199999999995, 283.45799999999997, 237.048, 322.728, 464.09999999999997, 574.77, 640.458, 614.04, 402.69599999999997], ['Drag(N)', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
exData = [[17.31, 17.41, 17.51, 17.61, 17.71, 17.82, 17.92, 18.02, 18.12, 18.22, 18.32, 18.43, 18.53, 18.63, 18.73, 18.83, 18.94, 19.04, 19.14, 19.24, 19.34, 19.45, 19.55, 19.65, 19.75, 19.85, 19.96, 20.06, 20.16, 20.26, 20.36, 20.46, 20.57, 20.67, 20.77, 20.87, 20.97, 21.08, 21.18, 21.28, 21.38, 21.48, 21.59, 21.69, 21.79, 21.89, 21.99, 22.1, 22.2, 22.3, 22.4, 22.51, 22.61, 22.71, 22.81, 22.91, 23.01, 23.11, 23.21, 23.32, 23.42, 23.52, 23.62, 23.72, 23.82, 23.92, 24.03, 24.13, 24.23, 24.33, 24.43, 24.53, 24.63, 24.74, 24.84, 24.94, 25.04, 25.14, 25.24, 25.34, 25.44, 25.55, 25.65, 25.75, 25.85, 25.95, 26.05, 26.15, 26.26, 26.36, 26.46, 26.56, 26.66, 26.76, 26.86, 26.96, 27.07, 27.17, 27.27, 27.37, 27.47, 27.57, 27.67, 27.78, 27.88, 27.98, 28.08, 28.18, 28.28, 28.38, 28.48, 28.59, 28.69, 28.79, 28.89, 28.99, 29.09, 29.19, 29.3, 29.4, 29.5, 29.6, 29.7, 29.8, 29.9, 30.01, 30.11, 30.21, 30.31, 30.41, 30.51, 30.61, 30.71, 30.82, 30.92, 31.02, 31.12, 31.22, 31.32, 31.42, 31.53, 31.63, 31.73, 31.83, 31.93, 32.03, 32.13, 32.23, 32.34], [2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0, 32.0, 34.0, 36.0, 38.0, 40.0, 42.0, 44.0, 46.0, 48.0, 50.0, 52.0, 54.0, 56.0, 58.0, 60.0, 62.0, 64.0, 66.0, 68.0, 70.0, 72.0, 74.0, 76.0, 78.0, 80.0, 82.0, 84.0, 86.0, 88.0, 90.0, 92.0, 94.0, 96.0, 98.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0], [0.7, 1.4, 2.1, 2.8, 3.5, 4.2, 4.9, 5.6, 6.3, 7.0, 7.7, 8.4, 9.1, 9.8, 10.5, 11.2, 11.9, 12.6, 13.3, 14.0, 14.7, 15.4, 16.1, 16.8, 17.5, 18.2, 18.9, 19.6, 20.3, 21.0, 21.7, 22.4, 23.1, 23.8, 24.5, 25.2, 25.9, 26.6, 27.3, 28.0, 28.7, 29.4, 30.1, 30.8, 31.5, 32.2, 32.9, 33.6, 34.3, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0209916, 0.0069972, 0.0209916, 0.0279888, 0.0279888, 0.0419832, 0.0489804, 0.0279888, 0.0559776, 0.0629748, 0.0769692, 0.0559776, 0.0769692, 0.069972, 0.0839664, 0.104958, 0.1189524, 0.1189524, 0.139944, 0.139944, 0.1539384, 0.139944, 0.1679328, 0.17493, 0.1819272, 0.1959216, 0.2029188, 0.2169132, 0.17493, 0.244902, 0.209916, 0.1959216, 0.2868852, 0.2658936, 0.3008796, 0.2658936, 0.2239104, 0.244902, 0.279888, 0.2169132, 0.2588964, 0.244902, 0.1889244, 0.209916, 0.2239104, 0.2518992, 0.2309076, 0.2588964, 0.1889244, 0.209916, 0.2029188, 0.209916, 0.2728908, 0.2728908, 0.244902, 0.1889244, 0.1819272, 0.1819272, 0.2029188, 0.2518992, 0.279888, 0.2239104, 0.244902, 0.1679328, 0.2169132, 0.2309076, 0.2379048, 0.279888, 0.2728908, 0.244902, 0.2239104, 0.1959216, 0.1959216, 0.2029188, 0.244902, 0.2728908, 0.2379048, 0.1679328, 0.1889244, 0.1959216, 0.244902, 0.2658936, 0.2588964, 0.244902, 0.1959216, 0.17493, 0.2169132, 0.1819272, 0.2728908, 0.2588964, 0.279888, 0.2029188, 0.17493, 0.17493, 0.1679328, 0.2309076, 0.279888, 0.2518992, 0.2518992, 0.17493, 0.1679328, 0.1679328, 0.1889244, 0.2518992, 0.2309076, 0.2658936, 0.1819272, 0.139944, 0.1679328, 0.17493, 0.2029188, 0.2868852, 0.2239104, 0.1959216, 0.1609356, 0.1329468, 0.209916, 0.2169132, 0.2588964, 0.2658936, 0.209916, 0.1679328, 0.139944, 0.2029188, 0.1959216, 0.209916, 0.2868852, 0.2239104, 0.244902, 0.2169132, 0.1819272, 0.1959216, 0.2239104, 0.209916, 0.244902, 0.2518992, 0.2169132, 0.1889244, 0.1889244, 0.1679328]]
# clean data: (so it is readable, and not 90000 at one point, and 0.5 at rest etc.)
#gets rid of all data that is above 90th percentile.
def cleanData(toClean):
    top = np.percentile(toClean, 90)
    print("*/ tenth percentile:",top)
    tmp = []
    for i in toClean:
        if i < top:
            tmp.append(i)
        else:
            tmp.append(top)
    return tmp




#output to csv
def csv(data):
    outputFile = "fig/output.csv" 
    outFile = open(outputFile,"w")
    outFile.write("Time(S), motorSpeed (%), Actual Speed (m/s),Force\n")
    for i in range(1,len(data[0])-1): 
        line = str(data[0][i])
        line += ", " + str(data[1][i])
        line += ", " + str(data[2][i])
        line += ", " + str(data[3][i])
        #print(line)
        line += "\n"
        outFile.write(line)
# =========== graph stuff.

# ==== create the color map: (https://www.pythonpool.com/matplotlib-custom-colormap)
a = cm.get_cmap('winter',64)
colors = a(np.linspace(0,1,64))
bg = np.array([250/265, 250/265, 250/265, 1])
colors[:5, :] = bg
colorMap = ListedColormap(colors)
# == plot
def plot(dataIn):
    # delete first row
    dataIn[0] = dataIn[0][1:]
    dataIn[1] = dataIn[1][1:]
    dataIn[2] = dataIn[2][1:]
    dataIn[3] = dataIn[3][1:]

    # plot top figure.
    fig, axs = plt.subplots(2, 1)
    fig.set_size_inches(10, 7.5)
    ln1 = axs[0].plot(dataIn[0],dataIn[3])
    axs[0].set(title = "Drag & Wind vs Time.")
    axs[0].set(ylabel = "Drag Force (N)")
    axs[0].set(xlabel = "Time (s)")
    axs[0].grid(True)

    axisTwo = axs[0].twinx()
    ln2 = axisTwo.plot(dataIn[0],dataIn[2],color="red",label='Wind Speed')
    axisTwo.set(ylabel = "Wind Speed (m/s)")

    lns = ln1 + ln2
    axs[0].legend(lns,['Drag','Wind Speed'])


    #plot bottom
    axs[1].set(title = "Drag vs Wind Speed.")
    axs[1].hexbin(dataIn[2],dataIn[3],gridsize=(50,20),cmap=colorMap)
    axs[1].set(ylabel = "Drag Force (N)")
    axs[1].set(xlabel = "Wind Speed (m/s)")
    axs[1].grid(True)
    # color bar
    cb = fig.colorbar(cm.ScalarMappable(cmap=colorMap),ax=axs[1],pad=0.2,orientation="horizontal",fraction=0.046)

    
    #plot all
    fig.tight_layout()
    fig.savefig('fig/out.png',dpi=300)
    plt.show()


if False: #self-test.
    plot(exData)